///////////////////////////////////////////////////////////////////////////
                               Reflection
                             Workshop - #4
Full Name  : Shubham Dharmnedrabhai Kandoi
Student ID#: 144838232

Authenticity Declaration:
I declare this submission is the result of my own work and has not been
shared with any other student or 3rd party content provider. This submitted
piece of work is entirely of my own creation.
///////////////////////////////////////////////////////////////////////////

A1.
"While" loop:

Application: The while loop checks the condition before entering the loop. If the condition is FALSE, the loop won't execute. So, it is suitable when we do want to validate means to check the user                
input is whether true or false before entering the loop.

Example:
 while (oranges > 0)
 {
     printf("Pick some ORANGES... how many did you pick? : ");
     scanf("%d", &i);
}

Explanation: In this example, the loop will only execute if (oranges>0) is true initially, if it is not true then it won't execute. So, for this kind of scenarios where we want to check condition whether it is true or false , "while"loop is suitable. 

"Do/While" Loop:

Application: The do/while loop checks the condition after executing the loop's block code, which gurantee that the loop will run atleast once, regardless of the condition is true/false. So, it is suitable when we wnat to ensure that user provided input run atleast once and repeat the process with respect to the condition.

Example:
 do
 {
     printf("Grocery Shopping\n");
     printf("================\n");


     printf("All the items are picked!\n\n");
     printf("Do another shopping? (0=NO): ");
     scanf("%d", &i);
     printf("\n");

    } while (i != 0);

Explanation:
The loop ensures that the input is collected and run atleast once and this do while loop is suitable if it needs to be repeated. In this example,  if user input "0" it will run atleast once however the loop will be exited if user input 0 again and if user take input other than 0 then it will keep running till user take input 0.

A2.
From the workshop I am choosing a segment where both "if" and "if/else if" instructions are used:
Example:
  if (i > cabbages)
  {
      printf("You picked too many... only %d more CABBAGE(S) are needed.\n", cabbages);
  }
  else if (i <= 0)
  {
      printf("ERROR: You must pick at least 1!\n");
  }
  else
  {
      cabbages -= i;
      if (cabbages > 0)
          printf("Looks like we still need some CABBAGES...\n");
      else
          printf("Great, that's the cabbages done!\n\n");
  } 
Using a series of "if" statements would be inefficient because even if an early "if" condition is met, all subsequent "if" conditions will still be checked. This is wasteful, especially when we know only one condition can be true. 
Using "if" repeatedly can be misleading. It might give the impression that multiple conditions can be true simultaneously, which isn't the case here. 
With "if/else if", once a true condition is met, the rest are skipped, making it more efficient. 
Using "if/else if" makes it clear that only one of the conditions will be met, and once that condition is found, the rest are skipped, optimizing the flow and execution. 

A3.
Code Formatting Importance :
->In my coding process, Iâ€™ve found that clear code formatting is crucial for various reasons. 
->For readability, proper indentation, spacing, and consistent naming conventions make the code more readable. It helps in distinguishing between different blocks of code, especially in constructs like loops and conditions. 
->For debugging, a well-formatted code aids in identifying and rectifying errors more quickly. When each logic part is neatly organized, it's easier to pinpoint where something might be going wrong. 
->For maintenance, future modifications become simpler when the code is clean. Anyone who might be revisiting the code, be it the original coder or a new developer, will find it easier to understand and modify.
Iteration and Selection:
->Selection and Iteration is essential in coding because it enables the program to make decisions as per the conditions(selection part) and repeat tasks multiple times (iteration).
i.  I ensured to use meaningful variable names that indicate their purpose. (i.e., apples_Qty, oranges_Qty, pears_Qty, tomatoes_Qty, cabbages_Qty)
ii. I also consistently indent nested blocks to visually represent the code hierarchy.
iii. I separate logical blocks with blank lines for better visual clarity. 




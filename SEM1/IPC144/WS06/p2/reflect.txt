///////////////////////////////////////////////////////////////////////////
                               Reflection
                             Workshop - #6
Full Name  : Shubham Dharmendrabhai Kandoi
Student ID#: 144838232

Authenticity Declaration:
I declare this submission is the result of my own work and has not been
shared with any other student or 3rd party content provider. This submitted
piece of work is entirely of my own creation.
///////////////////////////////////////////////////////////////////////////

A1.
Arrays that are arranged in a similar manner are called parallel arrays.
There are multiple reasons why we use parallel arrays:
-It allows for efficient store of data types or attributes that may not naturally fit together within a single data structure and allow us to manipulate the related data. In this case, the cost, priority, and financing options of each item are related data, so we store them in parallel arrays. This allows us to easily access and manipulate the data of each item using their index in the arrays.
-Parallel arrays can provide better performane in certain scenarios.
A2.

In my code, I have used a `for` loop for most of the iterations, and that's the most preferred iteration construct when working with arrays. Here are the reasons why `for` loops are commonly preferred over other options:
a.The for loop provides a convenient way to specify the initialization, condition and iteration expressions in all one place .
b.  When working with arrays, you often need to iterate through them in a sequential manner. The `for` loop is designed for this purpose and is well-suited for iterating over arrays and collections. 
In my code, I have used `for` loops effectively to iterate through arrays like `item_Cost`, `priority`, and `finance`. This choice is appropriate because it allows me to clearly specify the range and behavior of the loop, making the code more readable and maintainable.
For Loop:

for (i = 0; i < num_items; i++) {
	
	printf("%3d  %5d    %5c    %11.2lf\n", i + 1, priority[i], finance[i], item_Cost[i]);
}

While Loop:

int i =0;
while(i < num_items){

printf("%3d  %5d    %5c    %11.2lf\n", i + 1, priority[i], finance[i], item_Cost[i]);}
i++;
}

Do- while Loop:

do {

printf("%3d  %5d    %5c    %11.2lf\n", i + 1, priority[i], finance[i], item_Cost[i]);}
i++;

}while (i < num_items);


It's worth noting that while `for` loops are often the preferred choice for array iteration, other loop constructs like `while` and `do-while` have their use cases, especially when dealing 
with more complex control flows or situations where you don't know the number of iterations in advance. However, in your code, `for` loops are a suitable choice for the given requirements.


A3.
Testing:
To test my program, I execute the "YELLOW" highlighted user input data for the submission from the workshop instrunctions.
 

Debugging:

- For syntactic problems, I relied on the compiler error messages. These messages usually pinpoint the location and nature of the error. 
I would then navigate to the reported line number and correct the syntax.

-For semantic problems, which are logic errors, I inserted  print statements to display variable values at different points in the code. 
This helped me to track the flow of execution and identify unexpected values or behavior.
Once located, I revisited my logic and made necessary corrections to fix semantic errors in the code.
///////////////////////////////////////////////////////////////////////////
                              Reflection
                          Workshop - #2 (P2)
Full Name  : Shubham Dharmendrabhai Kandoi
Student ID#: 144838232
Email      : sdkandoi@myseneca.ca
Section    : ZBB

Authenticity Declaration:

I declare this submission is the result of my own work and has not been
shared with any other student or 3rd party content provider. This submitted
piece of work is entirely of my own creation.
///////////////////////////////////////////////////////////////////////////

A1. 
After executing both the codes:
In the Code Snippet 1, the result will be "a=4" and in the code snippet 2, the result will be "a=3".
Difference between both the codes is that: 
In the first code snippet the addition happens before the printing so due to the addition operation 'a++' before the printing operation prints the "a=4", however in the code snippet 2 the addition operation was the part of the printf statement, which is why in the code snippet 2, the result in the value printed was the same value which was initialised in the variable  "a ".
Basically, the placement of the addition operation in both the codes. So, this was the main reason why they generated two different results.

A2. 
The price1 and price 3 are not able to convert cent value properly because the use of format specifier "%f" in the print statement and also price 1 and price 3 is declared as a 'float' could be the reason why they are having rounding errors.
The other two variables price2 and price4 are declared as double and %lf is used in the printf statements. So, format specifiers are the reason why price 1 and price3 are having precision errors.

A3.
In the first example:
("%.2lf\n", money /100);
money/100 involves the division of two integer value (money and 100 both are integers). The result will be 0.00 because the format specifier is implicity cast to a 'double' due to the "lf" format specifier.

In the second example:
Similarly, it includes integer division but in this case the format specifier is different “%d”. So, the result will be an integer and the fractional part will be removed as the format specifier is %d.

In the third example:
This is an example of explicity casting as for getting precise result before integral division (double)money is cast to a 'double'. The result would be "double" but the fractional part will be precise or rounded up.

In the fourth example:
It is an explicit casting similarly as the third example but here the (double)money is cast to a double however the format specifier used in this operation is %d. So, the result will be an integer value, also the decimal value will be removed.
